//
//  HeightMap.swift
//  EmojiRPG
//
//  Created by Suisei killfaeh on 31/12/2024.
//

import Foundation

enum 🏔️📏🏔️
{
   case 📏, 🎲, 🎲📏, 🎢, 🎲🎲
}

class 🏔️🗺️
{
    var 🏔️📏🏔️🎚️ = 🏔️📏🏔️.📏
    var 🔲📏 = 10
    var 🔲📐 = 10
    var 🔲🏔️📏🏔️ = 16
    
    var 🔲🏔️📏🏔️📏: Int
    {
        get
        {
            return (🔲📏+1)*🔲🏔️📏🏔️
        }
    }
    
    var 🔲🏔️📏🏔️📐: Int
    {
        get
        {
            return (🔲📐+1)*🔲🏔️📏🏔️
        }
    }
    
    var 🛫🗺️: [[Double]] = []
    var 🏔️📏🏔️🗺️: [[Double]] = []
    static var 📤🗺️: [[Double]] = []
    
    static var 🧮🏔️📏🏔️ = 0
    static var 📏📏🏔️📏🏔️ = DispatchQueue(label: "🏔️📏🏔️")
    
    static func 🛠️🎢(_ 📥🎛️: [Double], _ 📥📏: Double) -> Double
    {
        var 📤📏: Double = 0.0
        
        for 👆 in 0..<📥🎛️.count
        {
            📤📏 = 📤📏 + 📥🎛️[👆]*pow(📥📏, Double(📥🎛️.count-1-👆))
        }
        
        return 📤📏
    }
    
    func 🛠️🏔️📏🏔️📏(_ 📥📐👆: Double, _ 📥📐🖕: Double, _ 📥📏: Double) -> Double
    {
        return 🏔️🗺️.🛠️🎢([📥📐🖕-📥📐👆, 📥📐👆], 📥📏)
    }
    
    func 🛠️🏔️📏🏔️🎲(_ 📥📐👆: Double, _ 📥📐🖕: Double, _ 📥📏: Double) -> Double
    {
        var 📤📏: Double = 0.0
        
        if 📥📏 >= 0.0 && 📥📏 <= 1.0
        {
            let 🎛️🎛️ = [📥📐🖕-📥📐👆, 📥📐👆]
            📤📏 = 🏔️🗺️.🛠️🎢(🎛️🎛️, 3.0*📥📏*📥📏 - 2.0*📥📏*📥📏*📥📏)
        }
        
        return 📤📏
    }
    
    func 🛠️🏔️📏🏔️🎲📏(_ 📥📐👆: Double, _ 📥📐🖕: Double, _ 📥📏: Double) -> Double
    {
        var 📤📏: Double = 0.0
        
        if 📥📏 >= 0.0 && 📥📏 <= 1.0
        {
            let 🎛️🎛️ = [📥📐🖕-📥📐👆, 📥📐👆]
            📤📏 = 🏔️🗺️.🛠️🎢(🎛️🎛️, 6.0*📥📏*📥📏*📥📏*📥📏*📥📏 - 15.0*📥📏*📥📏*📥📏*📥📏 + 10.0*📥📏*📥📏*📥📏)
        }
        
        return 📤📏
    }
    
    func 🛠️🏔️📏🏔️🎢(_ 📥📐👆: Double, _ 📥📐🖕: Double, _ 📥📏: Double) -> Double
    {
        var 📤📏: Double = 0.0
        
        if 📥📏 >= 0.0 && 📥📏 <= 1.0
        {
            let 🎛️🎛️ = [📥📐🖕-📥📐👆, 📥📐👆]
            📤📏 = 🏔️🗺️.🛠️🎢(🎛️🎛️, cos(📥📏*Double.pi)/2.0)
        }
        
        return 📤📏
    }
    
    func 🛠️🏔️📏🏔️🎲🎲(_ 📥📐👆: Double, _ 📥📐🖕: Double, _ 📥📐👆👆: Double, _ 📥📐🖕🖕: Double, _ 📥📏: Double) -> Double
    {
        var 📤📏: Double = 0.0
        
        if 📥📏 >= 0.0 && 📥📏 <= 1.0
        {
            var 🎛️🎛️ = [📥📐🖕🖕 - 📥📐👆👆 - 📥📐👆 + 📥📐🖕]
            🎛️🎛️.append(📥📐👆 - 📥📐🖕 - 🎛️🎛️[0])
            🎛️🎛️.append(📥📐👆👆 - 📥📐👆)
            🎛️🎛️.append(📥📐🖕)
            
            📤📏 = 🏔️🗺️.🛠️🎢(🎛️🎛️, 📥📏)
        }
        
        return 📤📏
    }
    
    func 🛠️🏔️📏🏔️()
    {
        if 🛫🗺️.count > 0
        {
            🏔️🗺️.📏📏🏔️📏🏔️ = DispatchQueue(label: "📏🏔️📏")
            🏔️🗺️.🧮🏔️📏🏔️ = 0
            
            🏔️📏🏔️🗺️ = []
            
            for _ in 0..<🔲🏔️📏🏔️📏
            {
                let 🏔️📏🏔️🗺️📐 = [Double](repeating: 0.0, count: 🔲🏔️📏🏔️📐)
                🏔️📏🏔️🗺️.append(🏔️📏🏔️🗺️📐)
            }
            
            for 👆 in 0..<🔲🏔️📏🏔️📏
            {
                for 🖕 in 0..<self.🔲🏔️📏🏔️📐
                {
                    self.🏔️📏🏔️🗺️[👆][🖕] = self.🛠️(Double(👆), Double(🖕))
                }
            }
            
            let 📍🏔️📏🏔️🗺️ = 🏔️🗺️.📐🗺️(🏔️📏🏔️🗺️)
            🏔️📏🏔️🗺️ = 📍🏔️📏🏔️🗺️
        }
    }
    
    func 🛠️(_ 📥📐👆: Double, _ 📥📐🖕: Double) -> Double
    {
        var 📤📏: Double = 0.0
        let 👆 = Int(📥📐👆/Double(🔲🏔️📏🏔️))
        let 🖕 = Int(📥📐🖕/Double(🔲🏔️📏🏔️))
        
        let 👆0 = 👆
        let 👆👈1 = 👆-1
        var 👆👉1 = 👆+1
                
        let 🖕0 = 🖕
        let 🖕👈1 = 🖕-1
        var 🖕👉1 = 🖕+1
        var 🖕👉2 = 🖕+2
        
        if 👆 >= 🔲📏
        {
            👆👉1 = 0
        }
        
        if 🖕 >= 🔲📐
        {
            🖕👉1 = 0
            🖕👉2 = 1
        }
        
        let 🏔️📏🏔️👆 = 📥📐👆/Double(🔲🏔️📏🏔️) - Double(👆)
        let 🏔️📏🏔️🖕 = 📥📐🖕/Double(🔲🏔️📏🏔️) - Double(🖕)
            
        switch 🏔️📏🏔️🎚️
        {
            case .📏:
                let 📤📏👆 = 🛠️🏔️📏🏔️📏(🛫🗺️[👆0][🖕0], 🛫🗺️[👆👉1][🖕0], 🏔️📏🏔️👆)
                let 📤📏🖕 = 🛠️🏔️📏🏔️📏(🛫🗺️[👆0][🖕👉1], 🛫🗺️[👆👉1][🖕👉1], 🏔️📏🏔️👆)
                📤📏 = 🛠️🏔️📏🏔️📏(📤📏👆, 📤📏🖕, 🏔️📏🏔️🖕)
            case .🎲:
                let 📤📏👆 = 🛠️🏔️📏🏔️🎲(🛫🗺️[👆0][🖕0], 🛫🗺️[👆👉1][🖕0], 🏔️📏🏔️👆)
                let 📤📏🖕 = 🛠️🏔️📏🏔️🎲(🛫🗺️[👆0][🖕👉1], 🛫🗺️[👆👉1][🖕👉1], 🏔️📏🏔️👆)
                📤📏 = 🛠️🏔️📏🏔️🎲(📤📏👆, 📤📏🖕, 🏔️📏🏔️🖕)
            case .🎲📏:
                let 📤📏👆 = 🛠️🏔️📏🏔️🎲📏(🛫🗺️[👆0][🖕0], 🛫🗺️[👆👉1][🖕0], 🏔️📏🏔️👆)
                let 📤📏🖕 = 🛠️🏔️📏🏔️🎲📏(🛫🗺️[👆0][🖕👉1], 🛫🗺️[👆👉1][🖕👉1], 🏔️📏🏔️👆)
                📤📏 = 🛠️🏔️📏🏔️🎲📏(📤📏👆, 📤📏🖕, 🏔️📏🏔️🖕)
            case .🎢:
                let 📤📏👆 = 🛠️🏔️📏🏔️🎢(🛫🗺️[👆0][🖕0], 🛫🗺️[👆👉1][🖕0], 🏔️📏🏔️👆)
                let 📤📏🖕 = 🛠️🏔️📏🏔️🎢(🛫🗺️[👆0][🖕👉1], 🛫🗺️[👆👉1][🖕👉1], 🏔️📏🏔️👆)
                📤📏 = 🛠️🏔️📏🏔️🎢(📤📏👆, 📤📏🖕, 🏔️📏🏔️🖕)
            case .🎲🎲:
                if (👆 == 0 || 👆 >= 🔲📏-2) && (🖕 == 0 || 🖕 >= 🔲📐-2)
                {
                    let 📤📏👆 = 🛠️🏔️📏🏔️🎢(🛫🗺️[👆0][🖕0], 🛫🗺️[👆👉1][🖕0], 🏔️📏🏔️👆)
                    let 📤📏🖕 = 🛠️🏔️📏🏔️🎢(🛫🗺️[👆0][🖕👉1], 🛫🗺️[👆👉1][🖕👉1], 🏔️📏🏔️👆)
                    📤📏 = 🛠️🏔️📏🏔️🎢(📤📏👆, 📤📏🖕, 🏔️📏🏔️🖕)
                }
                else if 👆 == 0 || 👆 >= 🔲📏-2
                {
                    let 📤📏👆 = 🛠️🏔️📏🏔️🎢(🛫🗺️[👆0][🖕👈1], 🛫🗺️[👆👉1][🖕👈1], 🏔️📏🏔️👆)
                    let 📤📏🖕 = 🛠️🏔️📏🏔️🎢(🛫🗺️[👆0][🖕0], 🛫🗺️[👆👉1][🖕0], 🏔️📏🏔️👆)
                    let 📤📏👆👆 = 🛠️🏔️📏🏔️🎢(🛫🗺️[👆0][🖕👉1], 🛫🗺️[👆👉1][🖕👉1], 🏔️📏🏔️👆)
                    let 📤📏🖕🖕 = 🛠️🏔️📏🏔️🎢(🛫🗺️[👆0][🖕👉2], 🛫🗺️[👆👉1][🖕👉2], 🏔️📏🏔️👆)
                    📤📏 = 🛠️🏔️📏🏔️🎲🎲(📤📏👆, 📤📏🖕, 📤📏👆👆, 📤📏🖕🖕, 🏔️📏🏔️👆)
                }
                else if 🖕 == 0 || 🖕 >= 🔲📐-2
                {
                    let 📤📏👆 = 🛠️🏔️📏🏔️🎲🎲(🛫🗺️[👆👈1][🖕0], 🛫🗺️[👆0][🖕0], 🛫🗺️[👆👉1][🖕0], 🛫🗺️[👆+2][🖕0], 🏔️📏🏔️👆)
                    let 📤📏🖕 = 🛠️🏔️📏🏔️🎲🎲(🛫🗺️[👆👈1][🖕👉1], 🛫🗺️[👆][🖕👉1], 🛫🗺️[👆👉1][🖕👉1], 🛫🗺️[👆+2][🖕👉1], 🏔️📏🏔️👆)
                    📤📏 = 🛠️🏔️📏🏔️🎢(📤📏👆, 📤📏🖕, 🏔️📏🏔️🖕)
                }
                else
                {
                    let 📤📏👆 = 🛠️🏔️📏🏔️🎲🎲(🛫🗺️[👆👈1][🖕👈1], 🛫🗺️[👆0][🖕👈1], 🛫🗺️[👆👉1][🖕👈1], 🛫🗺️[👆+2][🖕👈1], 🏔️📏🏔️👆)
                    let 📤📏🖕 = 🛠️🏔️📏🏔️🎲🎲(🛫🗺️[👆👈1][🖕0], 🛫🗺️[👆0][🖕0], 🛫🗺️[👆👉1][🖕0], 🛫🗺️[👆+2][🖕0], 🏔️📏🏔️👆)
                    let 📤📏👆👆 = 🛠️🏔️📏🏔️🎲🎲(🛫🗺️[👆👈1][🖕👉1], 🛫🗺️[👆0][🖕👉1], 🛫🗺️[👆👉1][🖕👉1], 🛫🗺️[👆+2][🖕👉1], 🏔️📏🏔️👆)
                    let 📤📏🖕🖕 = 🛠️🏔️📏🏔️🎲🎲(🛫🗺️[👆👈1][🖕👉2], 🛫🗺️[👆0][🖕👉2], 🛫🗺️[👆👉1][🖕👉2], 🛫🗺️[👆+2][🖕👉2], 🏔️📏🏔️👆)
                    📤📏 = 🛠️🏔️📏🏔️🎲🎲(📤📏👆, 📤📏🖕, 📤📏👆👆, 📤📏🖕🖕, 🏔️📏🏔️👆)
                }
        }
        
        return 📤📏
    }
    
    static func 📐🗺️(_ 📥🗺️: [[Double]]) -> [[Double]]
    {
        var 📤🗺️ = 📥🗺️
        
        if 📥🗺️.count > 0
        {
            var 👇📏 = 1000000000.0
            var 👆📏 = -1000000000.0
            
            for 👆 in 0..<📥🗺️.count
            {
                for 🖕 in 0..<📥🗺️[👆].count
                {
                    if 📥🗺️[👆][🖕] < 👇📏
                    {
                        👇📏 = 📥🗺️[👆][🖕]
                    }
                    
                    if 📥🗺️[👆][🖕] > 👆📏
                    {
                        👆📏 = 📥🗺️[👆][🖕]
                    }
                }
            }
            
            let 🤏 = 👆📏 - 👇📏
            
            for 👆 in 0..<📥🗺️.count
            {
                for 🖕 in 0..<📥🗺️[👆].count
                {
                    📤🗺️[👆][🖕] = (📥🗺️[👆][🖕]-👇📏)/🤏
                }
            }
        }
        
        return 📤🗺️
    }
    
    func 🛠️🎲🗺️()
    {
        🛫🗺️ = []
            
        for _ in 0..<🔲🏔️📏🏔️📏
        {
            var 🛫🗺️📐: [Double] = []
            
            for _ in 0..<🔲🏔️📏🏔️📐
            {
                🛫🗺️📐.append(Double.random(in: 0..<1))
            }
                
            🛫🗺️.append(🛫🗺️📐)
        }
    }
}

class 🎲🗺️: 🏔️🗺️
{
    var 🔲🎼 = 5
    var 🪨 = 0.5
    var 🗺️🗺️: [🏔️🗺️] = []
    
    var 🧮🎲🗺️ = 0
    
    @objc func 🛠️🎲🗺️👆(🖕: [Int])
    {
        let 🗺️ = 🏔️🗺️()
        🗺️.🏔️📏🏔️🎚️ = self.🏔️📏🏔️🎚️
        let 🖕🖕 = Int(pow(2.0, Double(🖕[0])))
        🗺️.🔲📏 = self.🔲📏*🖕🖕
        🗺️.🔲📐 = self.🔲📐*🖕🖕
        🗺️.🔲🏔️📏🏔️ = self.🔲🏔️📏🏔️/🖕🖕
        🗺️.🛠️🎲🗺️()
        self.🗺️🗺️[🖕[0]] = 🗺️
            
        self.🧮🎲🗺️ += 1
    }
    
    override func 🛠️🎲🗺️()
    {
        🧮🎲🗺️ = 0
        
        🗺️🗺️ = [🏔️🗺️](repeating: 🏔️🗺️(), count: 🔲🏔️📏🏔️📐)
        
        for 👆 in 0..<🔲🎼
        {
            let 🎞️ = Thread(target: self, selector: #selector(🛠️🎲🗺️👆(🖕:)), object: [👆])
            🎞️.start()
        }
        
        while 🧮🎲🗺️ < 🔲🎼
        {
            👩‍🦽🫙()
        }
    }
    
    func 🛠️🏔️📏🏔️👆(_ 👆: Int)
    {
        🏔️🗺️.📏📏🏔️📏🏔️.async
        {
            for 🖕 in 0..<self.🔲🏔️📏🏔️📐
            {
                self.🏔️📏🏔️🗺️[👆][🖕] = self.🛠️(Double(👆), Double(🖕))
            }
            
            🏔️🗺️.🧮🏔️📏🏔️ += 1
        }
    }
    
    @objc func 🛠️🎼(👆🎼: [Int])
    {
        🗺️🗺️[👆🎼[0]].🏔️📏🏔️🗺️ = []
        
        for _ in 0..<🔲🏔️📏🏔️📏
        {
            let 🏔️📏🏔️🗺️📐 = [Double](repeating: 0.0, count: 🔲🏔️📏🏔️📐)
            🗺️🗺️[👆🎼[0]].🏔️📏🏔️🗺️.append(🏔️📏🏔️🗺️📐)
        }
        
        for 👆 in 0..<🔲🏔️📏🏔️📏
        {
            for 🖕 in 0..<self.🔲🏔️📏🏔️📐
            {
                🗺️🗺️[👆🎼[0]].🏔️📏🏔️🗺️[👆][🖕] = 🗺️🗺️[👆🎼[0]].🛠️(Double(👆), Double(🖕))
            }
        }
        
        🗺️🗺️[👆🎼[0]].🏔️📏🏔️🗺️ = 🏔️🗺️.📐🗺️(🗺️🗺️[👆🎼[0]].🏔️📏🏔️🗺️)
        
        🧮🎲🗺️ += 1
    }
    
    override func 🛠️🏔️📏🏔️()
    {
        🧮🎲🗺️ = 0
        
        for 👆 in 0..<🔲🎼
        {
            let 🎞️ = Thread(target: self, selector: #selector(🛠️🎼(👆🎼:)), object: [👆])
            🎞️.start()
        }
        
        while 🧮🎲🗺️ < 🔲🎼
        {
            👩‍🦽🫙()
        }
        
        🏔️🗺️.📏📏🏔️📏🏔️ = DispatchQueue(label: "📏🏔️📏")
        🏔️🗺️.🧮🏔️📏🏔️ = 0
        
        🏔️📏🏔️🗺️ = []
        
        for _ in 0..<🔲🏔️📏🏔️📏
        {
            let 🏔️📏🏔️🗺️📐 = [Double](repeating: 0.0, count: 🔲🏔️📏🏔️📐)
            🏔️📏🏔️🗺️.append(🏔️📏🏔️🗺️📐)
        }
        
        for 👆 in 0..<🔲🏔️📏🏔️📏
        {
            🛠️🏔️📏🏔️👆(👆)
        }
        
        while 🏔️🗺️.🧮🏔️📏🏔️ < 🔲🏔️📏🏔️📏
        {
            👩‍🦽🫙()
        }
        
        🏔️📏🏔️🗺️ = 🏔️🗺️.📐🗺️(🏔️📏🏔️🗺️)
    }
    
    override func 🛠️(_ 📥📐👆: Double, _ 📥📐🖕: Double) -> Double
    {
        var 📤📏: Double = 0.0
        var 👆📏 = 1.0
        var 📌 = 0.0
        
        if 🗺️🗺️.count > 0
        {
            for 👆 in 0..<🔲🎼
            {
                let 🗺️ = 🗺️🗺️[👆]
                
                if Int(📥📐👆) < 🗺️.🏔️📏🏔️🗺️.count && Int(📥📐🖕) < 🗺️.🏔️📏🏔️🗺️[Int(📥📐👆)].count
                {
                    📌 = 📌 + 🗺️.🏔️📏🏔️🗺️[Int(📥📐👆)][Int(📥📐🖕)]*pow(🪨, Double(👆))
                }
            }
            
            👆📏 = (1.0 - pow(🪨, Double(🗺️🗺️.count)))/(1.0 - 🪨)
            📤📏 = 📌/👆📏
        }
        
        return 📤📏
    }
}
