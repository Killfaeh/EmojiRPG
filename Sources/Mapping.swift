//
//  Mapping.swift
//  EmojiRPG
//
//  Created by Suisei killfaeh on 27/12/2024.
//

import Foundation
import CoreImage

let 🖥️📏 = [38,24]

class 🌍🧩
{
    var 🏷️ = "🌍🧩"
    var 🏞️ = 🟩
    var 🏕️ = 💨+💨
    var 🚷 = 👎
    var 🎞️ = 👎
    var 👉🎞️ = 👍
    
    init(_ 🏞️: String, _ 🏕️: String)
    {
        self.🏞️ = 🏞️
        self.🏕️ = 🏕️
    }
    
    func 🎲🎞️👉🖥️()
    {
        if 🎞️ == 👍
        {
            if Int.random(in: 0...1) < 1
            {
                👉🎞️ = 👍
            }
            else
            {
                👉🎞️ = 👎
            }
        }
    }
    
    func 👉🖥️() -> String
    {
        var 📤 = 🏞️ + 🏕️ + 🟫
        
        if 🎞️ == 👍 && 👉🎞️
        {
            📤 = 🏞️ + 💨 + 💨 + 🟫
        }
        
        return 📤
    }
    
    func 👉💾() -> [Any]
    {
        let 🗂️: [Any] = [ 🏷️, 🏞️, 🏕️, 🚷, 🎞️ ]
        return 🗂️
    }
}

class 🌍🧩🚷: 🌍🧩
{
    override init(_ 🏞️: String, _ 🏕️: String)
    {
        super.init(🏞️, 🏕️)
        🚷 = 👍
    }
}

class 🌊: 🌍🧩🚷
{
    var 👆 = 0
    var 🖕 = 0
    var 🎞️👆 = 0
    
    override func 🎲🎞️👉🖥️()
    {
        if 🎞️👆%3 == 0
        {
            if (🖕%2 == 0 && 👆%3 == 0) || (🖕%2 != 0 && 👆%3 != 0)
            {
                👉🎞️ = 👍
            }
            else if (🖕%2 == 0 && 👆%3 != 0) || (🖕%2 != 0 && 👆%3 == 0)
            {
                👉🎞️ = 👎
            }
        }
        else if 🎞️👆%3 == 1
        {
            if (🖕%2 == 0 && 👆%3 == 1) || (🖕%2 != 0 && 👆%3 != 1)
            {
                👉🎞️ = 👍
            }
            else if (🖕%2 == 0 && 👆%3 != 1) || (🖕%2 != 0 && 👆%3 == 1)
            {
                👉🎞️ = 👎
            }
        }
        else if 🎞️👆%3 == 2
        {
            if (🖕%2 == 0 && 👆%3 == 2) || (🖕%2 != 0 && 👆%3 != 2)
            {
                👉🎞️ = 👍
            }
            else if (🖕%2 == 0 && 👆%3 != 2) || (🖕%2 != 0 && 👆%3 == 2)
            {
                👉🎞️ = 👎
            }
        }
        
        🎞️👆 += 1
    }
    
    override init(_ 🏞️: String, _ 🏕️: String)
    {
        super.init(🏞️, 🏕️)
        🎞️ = 👍
    }
}

class 🌍
{
    internal var 🌍🧩🧩🧩: [[🌍🧩]] = []
    private var 🏷️ = "world"
    private let 🧷 = "bmp"
    private var 🌍📁: String
    var 🔄 = 👎
    
    var 🗺️📏: Int
    {
        get
        {
            return 🌍🧩🧩🧩.count
        }
    }
    
    var 🗺️📐: Int
    {
        get
        {
            return 🌍🧩🧩🧩[0].count
        }
    }
    
    init()
    {
        🌍📁 = "Resources/maps/" + 🏷️ + "." + 🧷
    }
    
    private func 💾🏗️()
    {
        let 🖼️ = 🖼️🗺️(🌍📁)
        🖼️.🏗️()
    }
    
    func 🏗️()
    {        
        🌍📁 = 🔍📁("maps", 🏷️, 🧷)
        💾🏗️()
    }
    
    func 🏗️(_ 🗂️🗂️🗂️: [[[Any]]])
    {
        🌍🧩🧩🧩 = []
        var 👆 = 0
        
        for 🗂️🗂️ in 🗂️🗂️🗂️
        {
            var 🌍🧩🧩: [🌍🧩] = []
            var 🖕 = 0
            
            for 🗂️ in 🗂️🗂️
            {
                var 🧩 = 🌍🧩(🫙, 🫙)
                
                if let 🏷️: String = 🗂️[0] as? String
                {
                    🧩.🏷️ =  🏷️
                }
                
                if let 🏷️: String = 🗂️[1] as? String
                {
                    🧩.🏞️ =  🏷️
                    
                    if 🏷️ == "\u{001B}[48;5;21m" || 🏷️ == "\u{001B}[48;5;39m"
                    {
                        let 🌊🧩 = 🌊(🏷️, 🫙)
                        🌊🧩.👆 = 🖕
                        🌊🧩.🖕 = 👆
                        🧩 = 🌊🧩
                    }
                }
                
                if let 🏷️: String = 🗂️[2] as? String
                {
                    🧩.🏕️ =  🏷️
                }
                
                if let 🏷️: Bool = 🗂️[3] as? Bool
                {
                    🧩.🚷 =  🏷️
                }
                
                if let 🏷️: Bool = 🗂️[4] as? Bool
                {
                    🧩.🎞️ =  🏷️
                }
                
                🌍🧩🧩.append(🧩)
                🖕 += 1
            }
            
            🌍🧩🧩🧩.append(🌍🧩🧩)
            👆 += 1
        }
    }
    
    func 👉🖥️(_ 📏: Int, _ 📐: Int, _ 🎭🎭: [[String]]) -> String
    {
        var 📤 = 🫙
        
        var 📍📏 = 📏 - 🖥️📏[0]/2
        var 📍📐 = 📐 - 🖥️📏[1]/2
        
        if 🔄 == 👎
        {
            if 📍📏 < 0
            {
                📍📏 = 0
            }
            else if 📍📏 + 🖥️📏[0] > 🌍🧩🧩🧩[0].count
            {
                📍📏 = 🌍🧩🧩🧩[0].count - 🖥️📏[0]
            }
            
            if 📍📐 < 0
            {
                📍📐 = 0
            }
            else if 📍📐 + 🖥️📏[1] > 🌍🧩🧩🧩.count
            {
                📍📐 = 🌍🧩🧩🧩.count - 🖥️📏[1]
            }
        }
        
        for 👆 in 0..<🖥️📏[1]
        {
            var 📌📐 = 📍📐 + 👆
            
            if  🔄 == 👍
            {
                if 📌📐 < 0
                {
                    📌📐 = 🌍🧩🧩🧩.count + 📌📐
                }
                else if 📌📐 >= 🌍🧩🧩🧩.count
                {
                    📌📐 = 📌📐 - 🌍🧩🧩🧩.count
                }
            }
            
            let 🌍🧩🧩 = 🌍🧩🧩🧩[📌📐]
            
            if 👆 > 0
            {
                📤 = 📤 + 🪂
            }
            
            📤 = 📤 + 💨 + 💨
            
            for 🖕 in 0..<🖥️📏[0]
            {
                var 📌📏 = 📍📏 + 🖕
                
                if  🔄 == 👍
                {
                    if 📌📏 < 0
                    {
                        📌📏 = 🌍🧩🧩.count + 📌📏
                    }
                    else if 📌📏 >= 🌍🧩🧩.count
                    {
                        📌📏 = 📌📏 - 🌍🧩🧩.count
                    }
                }
                
                let 🔠 = 🎭🎭[👆][🖕]
                
                if 🔠 == "⬛️"
                {
                    📤 = 📤 + 🌍🧩🧩[📌📏].👉🖥️()
                }
                else
                {
                    📤 = 📤 + 🔠
                }
            }
        }
        
        return 📤
    }
    
    func 👉💾() -> [[[Any]]]
    {
        var 🗂️🗂️🗂️: [[[Any]]] = []
        
        for 👆 in 0..<🌍🧩🧩🧩.count
        {
            var 🗂️🗂️: [[Any]] = []
            
            for 🖕 in 0..<🌍🧩🧩🧩[👆].count
            {
                🗂️🗂️.append(🌍🧩🧩🧩[👆][🖕].👉💾())
            }
            
            🗂️🗂️🗂️.append(🗂️🗂️)
        }
        
        return 🗂️🗂️🗂️
    }
    
    func 🔲🚷(_ 👆: Int, _ 🖕: Int) -> Bool
    {
        var 👆👆 = 👆
        var 🖕🖕 = 🖕
        
        if 👆 < 0
        {
            👆👆 = 🌍🧩🧩🧩[0].count-1
        }
        else if 👆 >= 🌍🧩🧩🧩[0].count
        {
            👆👆 = 0
        }
        
        if 🖕 < 0
        {
            🖕🖕 = 🌍🧩🧩🧩.count-1
        }
        else if 🖕 >= 🌍🧩🧩🧩.count
        {
            🖕🖕 = 0
        }
        
        return 🌍🧩🧩🧩[🖕🖕][👆👆].🚷
    }
    
    func 🎲🎞️👉🖥️()
    {
        for 🌍🧩🧩 in 🌍🧩🧩🧩
        {
            for 🧩 in 🌍🧩🧩
            {
                if let 🌊🧩 = 🧩 as? 🌊
                {
                    🌊🧩.🎲🎞️👉🖥️()
                }
            }
        }
    }
}

class 🎲🌍: 🌍
{
    var 📏 = 40
    var 📐 = 24
    var 🏔️🗺️🗺️ = 🎲🗺️()
    
    let 🎨🎨 =
    [
        "\u{001B}[48;5;21m", "\u{001B}[48;5;21m", "\u{001B}[48;5;21m", "\u{001B}[48;5;21m", "\u{001B}[48;5;21m", "\u{001B}[48;5;21m", "\u{001B}[48;5;21m", "\u{001B}[48;5;21m", "\u{001B}[48;5;21m", "\u{001B}[48;5;21m", "\u{001B}[48;5;21m",
        "\u{001B}[48;5;39m",
        "\u{001B}[48;5;51m",
        
        "\u{001B}[48;5;229m",
        "\u{001B}[48;5;221m",
        
        "\u{001B}[48;5;154m", "\u{001B}[48;5;154m",
        "\u{001B}[48;5;82m", "\u{001B}[48;5;82m", "\u{001B}[48;5;82m", "\u{001B}[48;5;82m", "\u{001B}[48;5;82m",
        "\u{001B}[48;5;40m", "\u{001B}[48;5;40m", "\u{001B}[48;5;40m", "\u{001B}[48;5;40m", "\u{001B}[48;5;40m",
        "\u{001B}[48;5;76m",
        
        "\u{001B}[48;5;142m",
        
        "\u{001B}[48;5;145m", "\u{001B}[48;5;145m", "\u{001B}[48;5;145m",
        "\u{001B}[48;5;254m", "\u{001B}[48;5;254m", "\u{001B}[48;5;254m",
        "\u{001B}[48;5;15m", "\u{001B}[48;5;15m", "\u{001B}[48;5;15m"
    ]
    
    let 🎨🏕️🏕️ =
    [
        "\u{001B}[48;5;21m": [ "🌊" ],
        "\u{001B}[48;5;39m": [ 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, "🌊", "🌊", "🌊", "🌊", "🌊"],
        "\u{001B}[48;5;51m": [ 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, "🏝️" + 💨 ],
        
        "\u{001B}[48;5;229m": [ 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, "🌴" ],
        "\u{001B}[48;5;221m": [ 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, "🌾", "🌴", "🌵", "🌵" ],
        
        "\u{001B}[48;5;154m": [ 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, "🌾", "🌳", "🌴" ],
        "\u{001B}[48;5;82m" : [ 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 
                                💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, "🍄",  "🌱",
                                "🌳", "🌳", "🌳", "🌳", "🌳", "🌳", "🌳", "🌳", "🌳", "🌳", "🌳", "🌳", "🌳", "🌳", "🌳", 
                                "🌲", "🌲", "🌲", "🌲", "🌲", "🌲" ],
        "\u{001B}[48;5;40m": [ 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨,
                               💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, "🍄", "🌿",
                               "🌳", "🌳", "🌳", "🌳", "🌳", "🌳", 
                               "🌲", "🌲", "🌲", "🌲", "🌲", "🌲", "🌲", "🌲", "🌲", "🌲", "🌲", "🌲", "🌲", "🌲", "🌲" ],
        "\u{001B}[48;5;76m": [ 💨 + 💨, 💨 + 💨, 💨 + 💨, "🌲", "🌲" ],
        
        "\u{001B}[48;5;142m": [ 💨 + 💨, 💨 + 💨, 💨 + 💨, 💨 + 💨, "🌲", "🌲", "⛰️" + 💨 ],
        
        "\u{001B}[48;5;145m": [ 💨 + 💨, "⛰️" + 💨, "⛰️" + 💨, "⛰️" + 💨, "⛰️" + 💨 ],
        "\u{001B}[48;5;254m": [ 💨 + 💨, "⛰️" + 💨, "⛰️" + 💨, "⛰️" + 💨, "⛰️" + 💨, "🏔️" + 💨, "🏔️" + 💨, "🏔️" + 💨, "🏔️" + 💨 ],
        "\u{001B}[48;5;15m": [ "🏔️" + 💨, "🗻" ]
    ]
    
    init(_ 📏: Int, _ 📐: Int)
    {
        super.init()
        self.📏 = 📏
        self.📐 = 📐
        🔄 = 👍
    }
    
    func 🛠️🏔️🗺️() -> [[Double]]
    {
        let 🔲🎼 = 5
        let 🔲🏔️📏🏔️ = 2
        
        if 📏%Int(pow(2.0, Double(🔲🎼))) != 0
        {
            let 📌 = Int(Double(📏)/pow(2.0, Double(🔲🎼))) * Int(pow(2.0, Double(🔲🎼)))
            📏 = 📌*🔲🏔️📏🏔️
        }
        
        if 📐%Int(pow(2.0, Double(🔲🎼))) != 0
        {
            let 📌 = Int(Double(📐)/pow(2.0, Double(🔲🎼))) * Int(pow(2.0, Double(🔲🎼)))
            📐 = 📌*🔲🏔️📏🏔️
        }
        
        🏔️🗺️🗺️ = 🎲🗺️()
        🏔️🗺️🗺️.🔲🎼 = 🔲🎼
        🏔️🗺️🗺️.🪨 = 0.75
        🏔️🗺️🗺️.🔲📏 = 📏/Int(pow(2.0, Double(🔲🎼))) + 1
        🏔️🗺️🗺️.🔲📐 = 📐/Int(pow(2.0, Double(🔲🎼))) + 1
        🏔️🗺️🗺️.🔲🏔️📏🏔️ = 🔲🏔️📏🏔️ * Int(pow(2.0, Double(🔲🎼)))
        🏔️🗺️🗺️.🛠️🎲🗺️()
        🏔️🗺️🗺️.🛠️🏔️📏🏔️()
        
        return 🏔️🗺️🗺️.🏔️📏🏔️🗺️
    }
    
    func 🛫()
    {
        🌍🧩🧩🧩 = []
        let 🎲🗺️🗺️ = 🛠️🏔️🗺️()
        
        for 👆 in 0..<🎲🗺️🗺️.count
        {
            var 🌍🧩🧩: [🌍🧩] = []
            
            for 🖕 in 0..<🎲🗺️🗺️[👆].count
            {
                let 🏔️📏 = Int(Double(🎨🎨.count-1) * 🎲🗺️🗺️[👆][🖕])
                let 🎨 = 🎨🎨[🏔️📏]
                var 🏕️ = 💨 + 💨
                
                if let 🎨🏕️ = 🎨🏕️🏕️[🎨]
                {
                    if 🎨🏕️.count > 0
                    {
                        🏕️ = 🎨🏕️[Int.random(in: 0..<🎨🏕️.count)]
                    }
                }
                
                var 🧩 = 🌍🧩(🎨, 🏕️)
                
                if 🎨 == "\u{001B}[48;5;21m" || 🎨 == "\u{001B}[48;5;39m"
                {
                    let 🌊🧩 = 🌊(🎨, 🏕️)
                    🌊🧩.👆 = 🖕
                    🌊🧩.🖕 = 👆
                    🧩 = 🌊🧩
                }
                else if 🎨 == "\u{001B}[48;5;51m" || 🎨 == "\u{001B}[48;5;15m"
                {
                    🧩.🚷 = 👍
                }
                
                🌍🧩🧩.append(🧩)
            }
            
            🌍🧩🧩🧩.append(🌍🧩🧩)
        }
    }
}
